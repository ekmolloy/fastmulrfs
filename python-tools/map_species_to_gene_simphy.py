"""
This file is used to create a species to gene name file for SimPhy datasets.

Copyright (c) 2020 Erin K. Molloy
All rights reserved.

License: 3-Clause BSD,
see https://opensource.org/licenses/BSD-3-Clause
"""
import argparse
import dendropy
import sys


def map_species_to_genes_simphy(ifil, otre, omap):
    """
    Relabels leaves of locus or gene trees generated by SimPhy; specifically,
    [sid]_[lid]_[gid] is relabled to [sid]_[xgen], where [xgen] is an integer
    between 1 and the total number of copies of the species in the gene tree
    Also, removes internal node labels and branch lengths.

    Parameters
    ----------
    ifil : string
           name of input file (one newick string per line)
    otre : string
           name of output file (one newick string per line)
    omap : string
           name of output file (ASTRAL-multi mapping file)
    """
    max_ngen = {}
    ostr = ""

    with open(ifil, 'r') as f:
        for line in f.readlines():
            ngen = {}
            temp = "".join(line.split())
            taxa = dendropy.TaxonNamespace()
            tree = dendropy.Tree.get(data=temp,
                                     schema="newick",
                                     rooting='force-unrooted',
                                     taxon_namespace=taxa)

            for node in tree.postorder_node_iter():
                # Remove edge lengths
                node.edge.length = None

                if node.is_leaf():
                    # Change leaf label
                    species = node.taxon.label.split(' ')[0]
                    try:
                        ngen[species] += 1
                    except KeyError:
                        ngen[species] = 1
                    node.taxon.label = species + '_' + str(ngen[species])
                else:
                    # Remove internal node label
                    node.label = None

            ostr += tree.as_string(schema="newick")[5:].replace("'", "")

            for s in ngen:
                try:
                    x = max_ngen[s]
                    if x < ngen[s]:
                        max_ngen[s] = ngen[s]
                except KeyError:
                    max_ngen[s] = ngen[s]

    # Write multrees with re-labeled leaves
    with open(otre, 'w') as f:
        f.write(ostr)

    # Write gene to species map
    with open(omap, 'w') as f:
        for s in max_ngen:
            ng = max_ngen[s]
            f.write(s + ':')
            for g in range(1, ng):
                f.write(s + '_' + str(g) + ',')
            f.write(s + '_' + str(ng) + '\n')


def main(args):
    base = args.input.rsplit('.', 1)
    prefix = base[0]
    suffix = base[1]
    otre = base[0] + "-s2g." + base[1]
    omap = base[0] + "-s2g-map.txt"
    map_species_to_genes_simphy(args.input, otre, omap)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument("-i", "--input", type=str,
                        help="Input file", required=True)

    main(parser.parse_args())
